// Code generated by hertz generator.

package feedback

import (
	"context"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/common/utils"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	"github.com/li1553770945/sheepim-api-gateway/biz/constant"
	"github.com/li1553770945/sheepim-api-gateway/biz/infra/container"
	feedback "github.com/li1553770945/sheepim-api-gateway/biz/model/feedback"
)

// GetFeedbackCategories .
// @router /api/feedback/categories [GET]
func GetFeedbackCategories(ctx context.Context, c *app.RequestContext) {
	App := container.GetGlobalContainer()
	resp := App.FeedbackController.GetFeedbackCategories(ctx)
	response := map[string]interface{}{
		"code":    resp.Code,
		"message": resp.Message,
		"data":    resp.Data,
	}
	c.JSON(consts.StatusOK, response)
}

// GetFeedback .
// @router /api/feedback [GET]
func GetFeedback(ctx context.Context, c *app.RequestContext) {
	var req feedback.GetFeedbackReq
	err := c.BindAndValidate(&req)
	if err != nil {
		c.JSON(consts.StatusOK, utils.H{
			"code": constant.InvalidInput,
			"msg":  "参数校验失败: " + err.Error(),
		})
		return
	}
	App := container.GetGlobalContainer()
	resp := App.FeedbackController.GetFeedback(ctx, &req)
	c.JSON(consts.StatusOK, resp)
}

// AddFeedback .
// @router /api/feedback [POST]
func AddFeedback(ctx context.Context, c *app.RequestContext) {
	var req feedback.AddFeedbackReq
	err := c.BindAndValidate(&req)
	if err != nil {
		c.JSON(consts.StatusOK, utils.H{
			"code": constant.InvalidInput,
			"msg":  "参数校验失败: " + err.Error(),
		})
		return
	}
	App := container.GetGlobalContainer()
	resp := App.FeedbackController.AddFeedback(ctx, &req)
	c.JSON(consts.StatusOK, resp)
}

// AddReply .
// @router /api/feedback/reply [POST]
func AddReply(ctx context.Context, c *app.RequestContext) {
	var req feedback.AddReplyReq
	err := c.BindAndValidate(&req)
	if err != nil {
		c.JSON(consts.StatusOK, utils.H{
			"code": constant.InvalidInput,
			"msg":  "参数校验失败: " + err.Error(),
		})
		return
	}
	App := container.GetGlobalContainer()
	resp := App.FeedbackController.AddReply(ctx, &req)
	c.JSON(consts.StatusOK, resp)
}

// GetReply .
// @router /api/feedback/reply [GET]
func GetReply(ctx context.Context, c *app.RequestContext) {
	var req feedback.GetReplyReq
	err := c.BindAndValidate(&req)
	if err != nil {
		c.JSON(consts.StatusOK, utils.H{
			"code": constant.InvalidInput,
			"msg":  "参数校验失败: " + err.Error(),
		})
		return
	}
	App := container.GetGlobalContainer()
	resp := App.FeedbackController.GetReply(ctx, &req)
	c.JSON(consts.StatusOK, resp)
}

// GetUnreadFeedback .
// @router /api/feedback/unread [GET]
func GetUnreadFeedback(ctx context.Context, c *app.RequestContext) {
	App := container.GetGlobalContainer()
	resp := App.FeedbackController.GetUnreadFeedback(ctx)
	c.JSON(consts.StatusOK, resp)
}
